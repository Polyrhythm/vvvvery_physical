Texture2D texture2d : PREVIOUS;

float3 Size : TARGETSIZE;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};

//
// Noise functions
//
// Hash without Sine by DaveHoskins 
//
// https://www.shadertoy.com/view/4djSRW
//
float hash12(float2 p) {
    p  = 50.0*frac(p * 0.3183099);
    return frac(p.x*p.y*(p.x+p.y));
}

float hash13(float3 p3) {
    p3  = frac(p3 * 1031.1031);
    p3 += dot(p3, p3.yzx + 19.19);
    return frac((p3.x + p3.y) * p3.z);
}

float3 hash33(float3 p3) {
	p3 = frac(p3 * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+19.19);
    return frac((p3.xxy + p3.yxx)*p3.zyx);
}

float valueHash(float3 p3) {
    p3  = frac(p3 * 0.1031);
    p3 += dot(p3, p3.yzx + 19.19);
    return frac((p3.x + p3.y) * p3.z);
}

float valueNoise(in float3 x, float tile)
{
    float3 p = floor(x);
    float3 f = frac(x);
    f = f*f*(3.0-2.0*f);
	
    return lerp(lerp(lerp(valueHash(fmod(p+float3(0,0,0),tile)), 
                       valueHash(fmod(p+float3(1,0,0),tile)),f.x),
                   lerp(valueHash(fmod(p+float3(0,1,0),tile)), 
                        valueHash(fmod(p+float3(1,1,0),tile)),f.x),f.y),
               lerp(lerp(valueHash(fmod(p+float3(0,0,1),tile)), 
                        valueHash(fmod(p+float3(1,0,1),tile)),f.x),
                   lerp(valueHash(fmod(p+float3(0,1,1),tile)), 
                        valueHash(fmod(p+float3(1,1,1),tile)),f.x),f.y),f.z);
}

float voronoi(float3 x, float tile) {
    float3 p = floor(x);
    float3 f = frac(x);

    float res = 100.;
    for(int k=-1; k<=1; k++){
        for(int j=-1; j<=1; j++) {
            for(int i=-1; i<=1; i++) {
                float3 b = float3(i, j, k);
                float3 c = p + b;

                if(tile > 0.0) {
                    c = fmod(c, float3(tile, tile, tile));
                }

                float3 r = float3(b) - f + hash13(c);
                float d = dot(r, r);

                if (d < res) {
                    res = d;
                }
            }
        }
    }

    return 1.0 - res;
}


float4 PS(psInput input) : SV_Target
{
	float4 c = voronoi(float3(input.uv * Size.xy, 0.0), 0.5);
	return c;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



